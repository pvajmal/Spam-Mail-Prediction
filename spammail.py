# -*- coding: utf-8 -*-
"""spammail.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/gist/pvajmal/514f637db44b0de1485b960198a23055/spammail.ipynb

Import libraries
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.svm import LinearSVC
from sklearn.metrics import accuracy_score
from joblib import Parallel, delayed
import joblib

"""Data Preprocessing"""

df = pd.read_csv('sms_spam.csv', encoding='ISO-8859-1')
mail_data =  df.where(pd.notnull(df), '')

#mail_data.drop(df.columns[[0]], axis=1, inplace = True)
print(mail_data.head())

mail_data.columns = ['Category','Message']
print(mail_data.head())

mail_data.loc[mail_data['Category'] ==  'spam', 'Category'] = 0
mail_data.loc[mail_data['Category'] ==  'ham', 'Category'] = 1

print(mail_data.head())

X = mail_data['Message']
Y = mail_data['Category']

"""Data splitting into training and testing data"""

X_train, X_test, Y_train, Y_test = train_test_split(X,Y, train_size = 0.8, test_size= 0.2, random_state=1)
print(X_train.shape, X_test.shape)

"""Feature Extraction"""

feature_extraction = TfidfVectorizer(min_df = 1, stop_words = 'english', lowercase = 'True')
X_train_features = feature_extraction.fit_transform(X_train)
X_test_features = feature_extraction.transform(X_test)


Y_train = Y_train.astype('int')
Y_test = Y_test.astype('int')

"""Training the ML model

"""

model = LinearSVC()
model.fit(X_train_features, Y_train)

prediction_on_training_data = model.predict(X_train_features)

accuracy_on_training_data =  accuracy_score(prediction_on_training_data, Y_train)
print("Accuracy on Training data: ", accuracy_on_training_data)

prediction_on_testing_data = model.predict(X_test_features)
accuracy_on_testing_data =  accuracy_score(prediction_on_testing_data, Y_test)
print("Accuracy on Testing data: ", accuracy_on_testing_data)
# Save the trained model as a pickle string.
# Save the model as a pickle in a file
joblib.dump(model, 'SPAMPred.pkl')
joblib.dump(feature_extraction, 'FeaturePred.pkl')
  



